{"version":3,"file":"soundtouch.js","sources":["../src/FifoSampleBuffer.js","../src/AbstractFifoSamplePipe.js","../src/RateTransposer.js","../src/FilterSupport.js","../src/noop.js","../src/SimpleFilter.js","../src/Stretch.js","../src/testFloatEqual.js","../src/SoundTouch.js","../src/WebAudioBufferSource.js","../src/getWebAudioNode.js","../src/minsSecs.js","../src/PitchShifter.js"],"sourcesContent":["/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class FifoSampleBuffer {\n  constructor() {\n    this._vector = new Float32Array();\n    this._position = 0;\n    this._frameCount = 0;\n  }\n\n  get vector() {\n    return this._vector;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  get startIndex() {\n    return this._position * 2;\n  }\n\n  get frameCount() {\n    return this._frameCount;\n  }\n\n  get endIndex() {\n    return (this._position + this._frameCount) * 2;\n  }\n\n  clear() {\n    this.receive(this._frameCount);\n    this.rewind();\n  }\n\n  put(numFrames) {\n    this._frameCount += numFrames;\n  }\n\n  putSamples(samples, position, numFrames = 0) {\n    position = position || 0;\n    const sourceOffset = position * 2;\n    if (!(numFrames >= 0)) {\n      numFrames = (samples.length - sourceOffset) / 2;\n    }\n    const numSamples = numFrames * 2;\n\n    this.ensureCapacity(numFrames + this._frameCount);\n\n    const destOffset = this.endIndex;\n    this.vector.set(\n      samples.subarray(sourceOffset, sourceOffset + numSamples),\n      destOffset\n    );\n\n    this._frameCount += numFrames;\n  }\n\n  putBuffer(buffer, position, numFrames = 0) {\n    position = position || 0;\n    if (!(numFrames >= 0)) {\n      numFrames = buffer.frameCount - position;\n    }\n    this.putSamples(buffer.vector, buffer.position + position, numFrames);\n  }\n\n  receive(numFrames) {\n    if (!(numFrames >= 0) || numFrames > this._frameCount) {\n      numFrames = this.frameCount;\n    }\n    this._frameCount -= numFrames;\n    this._position += numFrames;\n  }\n\n  receiveSamples(output, numFrames = 0) {\n    const numSamples = numFrames * 2;\n    const sourceOffset = this.startIndex;\n    output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n    this.receive(numFrames);\n  }\n\n  extract(output, position = 0, numFrames = 0) {\n    const sourceOffset = this.startIndex + position * 2;\n    const numSamples = numFrames * 2;\n    output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n  }\n\n  ensureCapacity(numFrames = 0) {\n    const minLength = parseInt(numFrames * 2);\n    if (this._vector.length < minLength) {\n      const newVector = new Float32Array(minLength);\n      newVector.set(this._vector.subarray(this.startIndex, this.endIndex));\n      this._vector = newVector;\n      this._position = 0;\n    } else {\n      this.rewind();\n    }\n  }\n\n  ensureAdditionalCapacity(numFrames = 0) {\n    this.ensureCapacity(this._frameCount + numFrames);\n  }\n\n  rewind() {\n    if (this._position > 0) {\n      this._vector.set(this._vector.subarray(this.startIndex, this.endIndex));\n      this._position = 0;\n    }\n  }\n}\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport FifoSampleBuffer from './FifoSampleBuffer';\n\nexport default class AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    if (createBuffers) {\n      this._inputBuffer = new FifoSampleBuffer();\n      this._outputBuffer = new FifoSampleBuffer();\n    } else {\n      this._inputBuffer = this._outputBuffer = null;\n    }\n  }\n\n  get inputBuffer() {\n    return this._inputBuffer;\n  }\n\n  set inputBuffer(inputBuffer) {\n    this._inputBuffer = inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._outputBuffer;\n  }\n\n  set outputBuffer(outputBuffer) {\n    this._outputBuffer = outputBuffer;\n  }\n\n  clear() {\n    this._inputBuffer.clear();\n    this._outputBuffer.clear();\n  }\n}\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport AbstractFifoSamplePipe from './AbstractFifoSamplePipe';\n\nexport default class RateTransposer extends AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    super(createBuffers);\n    this.reset();\n    this._rate = 1;\n  }\n\n  set rate(rate) {\n    this._rate = rate;\n    // TODO: aa filter\n  }\n\n  reset() {\n    this.slopeCount = 0;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n  }\n\n  clone() {\n    const result = new RateTransposer();\n    result.rate = this._rate;\n    return result;\n  }\n\n  process() {\n    // TODO: aa filter\n    const numFrames = this._inputBuffer.frameCount;\n    this._outputBuffer.ensureAdditionalCapacity(numFrames / this._rate + 1);\n    const numFramesOutput = this.transpose(numFrames);\n    this._inputBuffer.receive();\n    this._outputBuffer.put(numFramesOutput);\n  }\n\n  transpose(numFrames = 0) {\n    if (numFrames === 0) {\n      return 0;\n    }\n\n    const src = this._inputBuffer.vector;\n    const srcOffset = this._inputBuffer.startIndex;\n\n    const dest = this._outputBuffer.vector;\n    const destOffset = this._outputBuffer.endIndex;\n\n    let used = 0;\n    let i = 0;\n\n    while (this.slopeCount < 1.0) {\n      dest[destOffset + 2 * i] =\n        (1.0 - this.slopeCount) * this.prevSampleL +\n        this.slopeCount * src[srcOffset];\n      dest[destOffset + 2 * i + 1] =\n        (1.0 - this.slopeCount) * this.prevSampleR +\n        this.slopeCount * src[srcOffset + 1];\n      i = i + 1;\n      this.slopeCount += this._rate;\n    }\n\n    this.slopeCount -= 1.0;\n\n    if (numFrames !== 1) {\n      // eslint-disable-next-line no-constant-condition\n      out: while (true) {\n        while (this.slopeCount > 1.0) {\n          this.slopeCount -= 1.0;\n          used = used + 1;\n          if (used >= numFrames - 1) {\n            break out;\n          }\n        }\n\n        const srcIndex = srcOffset + 2 * used;\n        dest[destOffset + 2 * i] =\n          (1.0 - this.slopeCount) * src[srcIndex] +\n          this.slopeCount * src[srcIndex + 2];\n        dest[destOffset + 2 * i + 1] =\n          (1.0 - this.slopeCount) * src[srcIndex + 1] +\n          this.slopeCount * src[srcIndex + 3];\n\n        i = i + 1;\n        this.slopeCount += this._rate;\n      }\n    }\n\n    this.prevSampleL = src[srcOffset + 2 * numFrames - 2];\n    this.prevSampleR = src[srcOffset + 2 * numFrames - 1];\n\n    return i;\n  }\n}\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class FilterSupport {\n  constructor(pipe) {\n    this._pipe = pipe;\n  }\n\n  get pipe() {\n    return this._pipe;\n  }\n\n  get inputBuffer() {\n    return this._pipe.inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._pipe.outputBuffer;\n  }\n\n  fillInputBuffer(/*numFrames*/) {\n    throw new Error('fillInputBuffer() not overridden');\n  }\n\n  fillOutputBuffer(numFrames = 0) {\n    while (this.outputBuffer.frameCount < numFrames) {\n      // TODO hardcoded buffer size\n      const numInputFrames = 8192 * 2 - this.inputBuffer.frameCount;\n\n      this.fillInputBuffer(numInputFrames);\n\n      if (this.inputBuffer.frameCount < 8192 * 2) {\n        break;\n        // TODO: flush pipe\n      }\n      this._pipe.process();\n    }\n  }\n\n  clear() {\n    this._pipe.clear();\n  }\n}\n","const noop = function() {\n  return;\n};\n\nexport default noop;\n","/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nimport FilterSupport from './FilterSupport';\nimport noop from './noop';\n\nexport default class SimpleFilter extends FilterSupport {\n  constructor(sourceSound, pipe, callback = noop) {\n    super(pipe);\n    this.callback = callback;\n    this.sourceSound = sourceSound;\n    //this.bufferDuration = sourceSound.buffer.duration;\n    this.historyBufferSize = 22050;\n    this._sourcePosition = 0;\n    this.outputBufferPosition = 0;\n    this._position = 0;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set position(position) {\n    if (position > this._position) {\n      throw new RangeError(\n        'New position may not be greater than current position'\n      );\n    }\n    const newOutputBufferPosition =\n      this.outputBufferPosition - (this._position - position);\n    if (newOutputBufferPosition < 0) {\n      throw new RangeError('New position falls outside of history buffer');\n    }\n    this.outputBufferPosition = newOutputBufferPosition;\n    this._position = position;\n  }\n\n  get sourcePosition() {\n    return this._sourcePosition;\n  }\n\n  set sourcePosition(sourcePosition) {\n    this.clear();\n    this._sourcePosition = sourcePosition;\n  }\n\n  onEnd() {\n    this.callback();\n  }\n\n  fillInputBuffer(numFrames = 0) {\n    const samples = new Float32Array(numFrames * 2);\n    const numFramesExtracted = this.sourceSound.extract(\n      samples,\n      numFrames,\n      this._sourcePosition\n    );\n    this._sourcePosition += numFramesExtracted;\n    this.inputBuffer.putSamples(samples, 0, numFramesExtracted);\n  }\n\n  extract(target, numFrames = 0) {\n    this.fillOutputBuffer(this.outputBufferPosition + numFrames);\n\n    const numFramesExtracted = Math.min(\n      numFrames,\n      this.outputBuffer.frameCount - this.outputBufferPosition\n    );\n    this.outputBuffer.extract(\n      target,\n      this.outputBufferPosition,\n      numFramesExtracted\n    );\n\n    const currentFrames = this.outputBufferPosition + numFramesExtracted;\n    this.outputBufferPosition = Math.min(this.historyBufferSize, currentFrames);\n    this.outputBuffer.receive(\n      Math.max(currentFrames - this.historyBufferSize, 0)\n    );\n\n    this._position += numFramesExtracted;\n    return numFramesExtracted;\n  }\n\n  handleSampleData(event) {\n    this.extract(event.data, 4096);\n  }\n\n  clear() {\n    super.clear();\n    this.outputBufferPosition = 0;\n  }\n}\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport AbstractFifoSamplePipe from './AbstractFifoSamplePipe';\n\n/**\n * Giving this value for the sequence length sets automatic parameter value\n * according to tempo setting (recommended)\n */\nconst USE_AUTO_SEQUENCE_LEN = 0;\n\n/**\n * Default length of a single processing sequence, in milliseconds. This determines to how\n * long sequences the original sound is chopped in the time-stretch algorithm.\n *\n * The larger this value is, the lesser sequences are used in processing. In principle\n * a bigger value sounds better when slowing down tempo, but worse when increasing tempo\n * and vice versa.\n *\n * Increasing this value reduces computational burden and vice versa.\n */\n//const DEFAULT_SEQUENCE_MS = 130\nconst DEFAULT_SEQUENCE_MS = USE_AUTO_SEQUENCE_LEN;\n\n/**\n * Giving this value for the seek window length sets automatic parameter value\n * according to tempo setting (recommended)\n */\nconst USE_AUTO_SEEKWINDOW_LEN = 0;\n\n/**\n * Seeking window default length in milliseconds for algorithm that finds the best possible\n * overlapping location. This determines from how wide window the algorithm may look for an\n * optimal joining location when mixing the sound sequences back together.\n *\n * The bigger this window setting is, the higher the possibility to find a better mixing\n * position will become, but at the same time large values may cause a \"drifting\" artifact\n * because consequent sequences will be taken at more uneven intervals.\n *\n * If there's a disturbing artifact that sounds as if a constant frequency was drifting\n * around, try reducing this setting.\n *\n * Increasing this value increases computational burden and vice versa.\n */\n//const DEFAULT_SEEKWINDOW_MS = 25;\nconst DEFAULT_SEEKWINDOW_MS = USE_AUTO_SEEKWINDOW_LEN;\n\n/**\n * Overlap length in milliseconds. When the chopped sound sequences are mixed back together,\n * to form a continuous sound stream, this parameter defines over how long period the two\n * consecutive sequences are let to overlap each other.\n *\n * This shouldn't be that critical parameter. If you reduce the DEFAULT_SEQUENCE_MS setting\n * by a large amount, you might wish to try a smaller value on this.\n *\n * Increasing this value increases computational burden and vice versa.\n */\nconst DEFAULT_OVERLAP_MS = 8;\n\n// Table for the hierarchical mixing position seeking algorithm\nconst _SCAN_OFFSETS = [\n  [\n    124,\n    186,\n    248,\n    310,\n    372,\n    434,\n    496,\n    558,\n    620,\n    682,\n    744,\n    806,\n    868,\n    930,\n    992,\n    1054,\n    1116,\n    1178,\n    1240,\n    1302,\n    1364,\n    1426,\n    1488,\n    0\n  ],\n  [\n    -100,\n    -75,\n    -50,\n    -25,\n    25,\n    50,\n    75,\n    100,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n  ],\n  [\n    -20,\n    -15,\n    -10,\n    -5,\n    5,\n    10,\n    15,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n  ],\n  [-4, -3, -2, -1, 1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n];\n\n// Adjust tempo param according to tempo, so that variating processing sequence length is used\n// at varius tempo settings, between the given low...top limits\nconst AUTOSEQ_TEMPO_LOW = 0.5; // auto setting low tempo range (-50%)\nconst AUTOSEQ_TEMPO_TOP = 2.0; // auto setting top tempo range (+100%)\n\n// sequence-ms setting values at above low & top tempo\nconst AUTOSEQ_AT_MIN = 125.0;\nconst AUTOSEQ_AT_MAX = 50.0;\nconst AUTOSEQ_K =\n  (AUTOSEQ_AT_MAX - AUTOSEQ_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW);\nconst AUTOSEQ_C = AUTOSEQ_AT_MIN - AUTOSEQ_K * AUTOSEQ_TEMPO_LOW;\n\n// seek-window-ms setting values at above low & top tempo\nconst AUTOSEEK_AT_MIN = 25.0;\nconst AUTOSEEK_AT_MAX = 15.0;\nconst AUTOSEEK_K =\n  (AUTOSEEK_AT_MAX - AUTOSEEK_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW);\nconst AUTOSEEK_C = AUTOSEEK_AT_MIN - AUTOSEEK_K * AUTOSEQ_TEMPO_LOW;\n\nexport default class Stretch extends AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    super(createBuffers);\n    this._quickSeek = true;\n    this.midBufferDirty = false;\n\n    this.midBuffer = null;\n    this.overlapLength = 0;\n\n    this.autoSeqSetting = true;\n    this.autoSeekSetting = true;\n\n    this._tempo = 1;\n    this.setParameters(\n      44100,\n      DEFAULT_SEQUENCE_MS,\n      DEFAULT_SEEKWINDOW_MS,\n      DEFAULT_OVERLAP_MS\n    );\n  }\n\n  clear() {\n    super.clear();\n    this.clearMidBuffer();\n  }\n\n  clearMidBuffer() {\n    if (this.midBufferDirty) {\n      this.midBufferDirty = false;\n      this.midBuffer = null;\n    }\n  }\n\n  /**\n   * Sets routine control parameters. These control are certain time constants\n   * defining how the sound is stretched to the desired duration.\n   *\n   * 'sampleRate' = sample rate of the sound\n   * 'sequenceMS' = one processing sequence length in milliseconds (default = 82 ms)\n   * 'seekwindowMS' = seeking window length for scanning the best overlapping\n   *      position (default = 28 ms)\n   * 'overlapMS' = overlapping length (default = 12 ms)\n   */\n  setParameters(sampleRate, sequenceMs, seekWindowMs, overlapMs) {\n    // accept only positive parameter values - if zero or negative, use old values instead\n    if (sampleRate > 0) {\n      this.sampleRate = sampleRate;\n    }\n\n    if (overlapMs > 0) {\n      this.overlapMs = overlapMs;\n    }\n\n    if (sequenceMs > 0) {\n      this.sequenceMs = sequenceMs;\n      this.autoSeqSetting = false;\n    } else {\n      // zero or below, use automatic setting\n      this.autoSeqSetting = true;\n    }\n\n    if (seekWindowMs > 0) {\n      this.seekWindowMs = seekWindowMs;\n      this.autoSeekSetting = false;\n    } else {\n      // zero or below, use automatic setting\n      this.autoSeekSetting = true;\n    }\n\n    this.calculateSequenceParameters();\n\n    this.calculateOverlapLength(this.overlapMs);\n\n    // set tempo to recalculate 'sampleReq'\n    this.tempo = this._tempo;\n  }\n\n  /**\n   * Sets new target tempo. Normal tempo = 'SCALE', smaller values represent slower\n   * tempo, larger faster tempo.\n   */\n  set tempo(newTempo) {\n    let intskip;\n\n    this._tempo = newTempo;\n\n    // Calculate new sequence duration\n    this.calculateSequenceParameters();\n\n    // Calculate ideal skip length (according to tempo value)\n    this.nominalSkip =\n      this._tempo * (this.seekWindowLength - this.overlapLength);\n    this.skipFract = 0;\n    intskip = Math.floor(this.nominalSkip + 0.5);\n\n    // Calculate how many samples are needed in the 'inputBuffer' to process another batch of samples\n    this.sampleReq =\n      Math.max(intskip + this.overlapLength, this.seekWindowLength) +\n      this.seekLength;\n  }\n\n  get tempo() {\n    return this._tempo;\n  }\n\n  get inputChunkSize() {\n    return this.sampleReq;\n  }\n\n  get outputChunkSize() {\n    return (\n      this.overlapLength +\n      Math.max(0, this.seekWindowLength - 2 * this.overlapLength)\n    );\n  }\n\n  /**\n   * Calculates overlapInMsec period length in samples.\n   */\n  calculateOverlapLength(overlapInMsec = 0) {\n    let newOvl;\n\n    // TODO assert(overlapInMsec >= 0);\n    newOvl = (this.sampleRate * overlapInMsec) / 1000;\n    newOvl = newOvl < 16 ? 16 : newOvl;\n\n    // must be divisible by 8\n    newOvl -= newOvl % 8;\n\n    this.overlapLength = newOvl;\n\n    this.refMidBuffer = new Float32Array(this.overlapLength * 2);\n    this.midBuffer = new Float32Array(this.overlapLength * 2);\n  }\n\n  checkLimits(x, mi, ma) {\n    return x < mi ? mi : x > ma ? ma : x;\n  }\n\n  /**\n   * Calculates processing sequence length according to tempo setting\n   */\n  calculateSequenceParameters() {\n    let seq;\n    let seek;\n\n    if (this.autoSeqSetting) {\n      seq = AUTOSEQ_C + AUTOSEQ_K * this._tempo;\n      seq = this.checkLimits(seq, AUTOSEQ_AT_MAX, AUTOSEQ_AT_MIN);\n      this.sequenceMs = Math.floor(seq + 0.5);\n    }\n\n    if (this.autoSeekSetting) {\n      seek = AUTOSEEK_C + AUTOSEEK_K * this._tempo;\n      seek = this.checkLimits(seek, AUTOSEEK_AT_MAX, AUTOSEEK_AT_MIN);\n      this.seekWindowMs = Math.floor(seek + 0.5);\n    }\n\n    // Update seek window lengths\n    this.seekWindowLength = Math.floor(\n      (this.sampleRate * this.sequenceMs) / 1000\n    );\n    this.seekLength = Math.floor((this.sampleRate * this.seekWindowMs) / 1000);\n  }\n\n  /**\n   * Enables/disables the quick position seeking algorithm.\n   */\n  set quickSeek(enable) {\n    this._quickSeek = enable;\n  }\n\n  clone() {\n    const result = new Stretch();\n    result.tempo = this._tempo;\n    result.setParameters(\n      this.sampleRate,\n      this.sequenceMs,\n      this.seekWindowMs,\n      this.overlapMs\n    );\n    return result;\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position.\n   */\n  seekBestOverlapPosition() {\n    return this._quickSeek\n      ? this.seekBestOverlapPositionStereoQuick()\n      : this.seekBestOverlapPositionStereo();\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position. The 'stereo' version of the\n   * routine\n   *\n   * The best position is determined as the position where the two overlapped\n   * sample sequences are 'most alike', in terms of the highest cross-correlation\n   * value over the overlapping period\n   */\n  seekBestOverlapPositionStereo() {\n    let bestOffset;\n    let bestCorrelation;\n    let correlation;\n    let i = 0;\n\n    // Slopes the amplitudes of the 'midBuffer' samples\n    this.preCalculateCorrelationReferenceStereo();\n\n    bestOffset = 0;\n    bestCorrelation = Number.MIN_VALUE;\n\n    // Scans for the best correlation value by testing each possible position over the permitted range\n    for (; i < this.seekLength; i = i + 1) {\n      // Calculates correlation value for the mixing position corresponding to 'i'\n      correlation = this.calculateCrossCorrelationStereo(\n        2 * i,\n        this.refMidBuffer\n      );\n\n      // Checks for the highest correlation value\n      if (correlation > bestCorrelation) {\n        bestCorrelation = correlation;\n        bestOffset = i;\n      }\n    }\n\n    return bestOffset;\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position. The 'stereo' version of the\n   * routine\n   *\n   * The best position is determined as the position where the two overlapped\n   * sample sequences are 'most alike', in terms of the highest cross-correlation\n   * value over the overlapping period\n   */\n  seekBestOverlapPositionStereoQuick() {\n    let bestOffset;\n    let bestCorrelation;\n    let correlation;\n    let scanCount = 0;\n    let correlationOffset;\n    let tempOffset;\n\n    // Slopes the amplitude of the 'midBuffer' samples\n    this.preCalculateCorrelationReferenceStereo();\n\n    bestCorrelation = Number.MIN_VALUE;\n    bestOffset = 0;\n    correlationOffset = 0;\n    tempOffset = 0;\n\n    // Scans for the best correlation value using four-pass hierarchical search.\n    //\n    // The look-up table 'scans' has hierarchical position adjusting steps.\n    // In first pass the routine searhes for the highest correlation with\n    // relatively coarse steps, then rescans the neighbourhood of the highest\n    // correlation with better resolution and so on.\n    for (; scanCount < 4; scanCount = scanCount + 1) {\n      let j = 0;\n      while (_SCAN_OFFSETS[scanCount][j]) {\n        tempOffset = correlationOffset + _SCAN_OFFSETS[scanCount][j];\n        if (tempOffset >= this.seekLength) {\n          break;\n        }\n\n        // Calculates correlation value for the mixing position corresponding to 'tempOffset'\n        correlation = this.calculateCrossCorrelationStereo(\n          2 * tempOffset,\n          this.refMidBuffer\n        );\n\n        // Checks for the highest correlation value\n        if (correlation > bestCorrelation) {\n          bestCorrelation = correlation;\n          bestOffset = tempOffset;\n        }\n        j = j + 1;\n      }\n      correlationOffset = bestOffset;\n    }\n\n    return bestOffset;\n  }\n\n  /**\n   * Slopes the amplitude of the 'midBuffer' samples so that cross correlation\n   * is faster to calculate\n   */\n  preCalculateCorrelationReferenceStereo() {\n    let i = 0;\n    let context;\n    let temp;\n\n    for (; i < this.overlapLength; i = i + 1) {\n      temp = i * (this.overlapLength - i);\n      context = i * 2;\n      this.refMidBuffer[context] = this.midBuffer[context] * temp;\n      this.refMidBuffer[context + 1] = this.midBuffer[context + 1] * temp;\n    }\n  }\n\n  calculateCrossCorrelationStereo(mixingPosition, compare) {\n    const mixing = this._inputBuffer.vector;\n    mixingPosition += this._inputBuffer.startIndex;\n\n    let correlation = 0;\n    let i = 2;\n    const calcLength = 2 * this.overlapLength;\n    let mixingOffset;\n\n    for (; i < calcLength; i = i + 2) {\n      mixingOffset = i + mixingPosition;\n      correlation +=\n        mixing[mixingOffset] * compare[i] +\n        mixing[mixingOffset + 1] * compare[i + 1];\n    }\n\n    return correlation;\n  }\n\n  // TODO inline\n  /**\n   * Overlaps samples in 'midBuffer' with the samples in 'pInputBuffer' at position\n   * of 'ovlPos'.\n   */\n  overlap(overlapPosition) {\n    this.overlapStereo(2 * overlapPosition);\n  }\n\n  /**\n   * Overlaps samples in 'midBuffer' with the samples in 'pInput'\n   */\n  overlapStereo(inputPosition) {\n    const input = this._inputBuffer.vector;\n    inputPosition += this._inputBuffer.startIndex;\n\n    const output = this._outputBuffer.vector;\n    const outputPosition = this._outputBuffer.endIndex;\n\n    let i = 0;\n    let context;\n    let tempFrame;\n    const frameScale = 1 / this.overlapLength;\n    let fi;\n    let inputOffset;\n    let outputOffset;\n\n    for (; i < this.overlapLength; i = i + 1) {\n      tempFrame = (this.overlapLength - i) * frameScale;\n      fi = i * frameScale;\n      context = 2 * i;\n      inputOffset = context + inputPosition;\n      outputOffset = context + outputPosition;\n      output[outputOffset + 0] =\n        input[inputOffset + 0] * fi + this.midBuffer[context + 0] * tempFrame;\n      output[outputOffset + 1] =\n        input[inputOffset + 1] * fi + this.midBuffer[context + 1] * tempFrame;\n    }\n  }\n\n  process() {\n    let offset;\n    let temp;\n    let overlapSkip;\n\n    if (this.midBuffer === null) {\n      // if midBuffer is empty, move the first samples of the input stream into it\n      if (this._inputBuffer.frameCount < this.overlapLength) {\n        // wait until we've got the overlapLength samples\n        return;\n      }\n      this.midBuffer = new Float32Array(this.overlapLength * 2);\n      this._inputBuffer.receiveSamples(this.midBuffer, this.overlapLength);\n    }\n\n    // Process samples as long as there are enough samples in 'inputBuffer' to form a processing frame\n    while (this._inputBuffer.frameCount >= this.sampleReq) {\n      // If tempo differs from the normal ('SCALE'), scan for hte best overlapping position\n      offset = this.seekBestOverlapPosition();\n\n      /**\n       * Mix the samples in the 'inputBuffer' at position of 'offset' with the samples in 'midBuffer'\n       * using sliding overlapping\n       * ... first partially overlap with the end of the previous sequence (that's in 'midBuffer')\n       */\n      this._outputBuffer.ensureAdditionalCapacity(this.overlapLength);\n      // FIXME unit?\n      // overlap(uint(offset));\n      this.overlap(Math.floor(offset));\n      this._outputBuffer.put(this.overlapLength);\n\n      // ... then copy sequence samples from 'inputBuffer' to output\n      temp = this.seekWindowLength - 2 * this.overlapLength; // & 0xfffffffe;\n      if (temp > 0) {\n        this._outputBuffer.putBuffer(\n          this._inputBuffer,\n          offset + this.overlapLength,\n          temp\n        );\n      }\n\n      /**\n       * Copies the end of the current sequence from 'inputBuffer' to 'midBuffer' for being mixed with\n       * the beginning of the next processing sequence and so on\n       */\n      // assert(offset + seekWindowLength <= (int)inputBuffer.numSamples());\n      const start =\n        this._inputBuffer.startIndex +\n        2 * (offset + this.seekWindowLength - this.overlapLength);\n      this.midBuffer.set(\n        this._inputBuffer.vector.subarray(start, start + 2 * this.overlapLength)\n      );\n\n      /**\n       * Remove the processed samples from the input buffer. Update the difference between\n       * integer & nominal skip step to 'skipFract' in order to prevent the error from\n       * accumulating over time\n       */\n      this.skipFract += this.nominalSkip; // real skip size\n      overlapSkip = Math.floor(this.skipFract);\n      this.skipFract -= overlapSkip;\n      this._inputBuffer.receive(overlapSkip);\n    }\n  }\n}\n","const testFloatEqual = function(a, b) {\n  return (a > b ? a - b : b - a) > 1e-10;\n};\n\nexport default testFloatEqual;\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport RateTransposer from './RateTransposer';\nimport Stretch from './Stretch';\nimport FifoSampleBuffer from './FifoSampleBuffer';\nimport testFloatEqual from './testFloatEqual';\n\nexport default class SoundTouch {\n  constructor() {\n    this.transposer = new RateTransposer(false);\n    this.stretch = new Stretch(false);\n\n    this._inputBuffer = new FifoSampleBuffer();\n    this._intermediateBuffer = new FifoSampleBuffer();\n    this._outputBuffer = new FifoSampleBuffer();\n\n    this._rate = 0;\n    this._tempo = 0;\n\n    this.virtualPitch = 1.0;\n    this.virtualRate = 1.0;\n    this.virtualTempo = 1.0;\n\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  clear() {\n    this.transposer.clear();\n    this.stretch.clear();\n  }\n\n  clone() {\n    const result = new SoundTouch();\n    result.rate = this.rate;\n    result.tempo = this.tempo;\n    return result;\n  }\n\n  get rate() {\n    return this._rate;\n  }\n\n  set rate(rate) {\n    this.virtualRate = rate;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set rateChange(rateChange) {\n    this._rate = 1.0 + 0.01 * rateChange;\n  }\n\n  get tempo() {\n    return this._tempo;\n  }\n\n  set tempo(tempo) {\n    this.virtualTempo = tempo;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set tempoChange(tempoChange) {\n    this.tempo = 1.0 + 0.01 * tempoChange;\n  }\n\n  set pitch(pitch) {\n    this.virtualPitch = pitch;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set pitchOctaves(pitchOctaves) {\n    this.pitch = Math.exp(0.69314718056 * pitchOctaves);\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set pitchSemitones(pitchSemitones) {\n    this.pitchOctaves = pitchSemitones / 12.0;\n  }\n\n  get inputBuffer() {\n    return this._inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._outputBuffer;\n  }\n\n  calculateEffectiveRateAndTempo() {\n    const previousTempo = this._tempo;\n    const previousRate = this._rate;\n\n    this._tempo = this.virtualTempo / this.virtualPitch;\n    this._rate = this.virtualRate * this.virtualPitch;\n\n    if (testFloatEqual(this._tempo, previousTempo)) {\n      this.stretch.tempo = this._tempo;\n    }\n    if (testFloatEqual(this._rate, previousRate)) {\n      this.transposer.rate = this._rate;\n    }\n\n    if (this._rate > 1.0) {\n      if (this._outputBuffer != this.transposer.outputBuffer) {\n        this.stretch.inputBuffer = this._inputBuffer;\n        this.stretch.outputBuffer = this._intermediateBuffer;\n\n        this.transposer.inputBuffer = this._intermediateBuffer;\n        this.transposer.outputBuffer = this._outputBuffer;\n      }\n    } else {\n      if (this._outputBuffer != this.stretch.outputBuffer) {\n        this.transposer.inputBuffer = this._inputBuffer;\n        this.transposer.outputBuffer = this._intermediateBuffer;\n\n        this.stretch.inputBuffer = this._intermediateBuffer;\n        this.stretch.outputBuffer = this._outputBuffer;\n      }\n    }\n  }\n\n  process() {\n    if (this._rate > 1.0) {\n      this.stretch.process();\n      this.transposer.process();\n    } else {\n      this.transposer.process();\n      this.stretch.process();\n    }\n  }\n}\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class WebAudioBufferSource {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this._position = 0;\n  }\n\n  get dualChannel() {\n    return this.buffer.numberOfChannels > 1;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    this._position = value;\n  }\n\n  extract(target, numFrames = 0, position = 0) {\n    this.position = position;\n    let left = this.buffer.getChannelData(0);\n    let right = this.dualChannel\n      ? this.buffer.getChannelData(1)\n      : this.buffer.getChannelData(0);\n    let i = 0;\n    for (; i < numFrames; i++) {\n      target[i * 2] = left[i + position];\n      target[i * 2 + 1] = right[i + position];\n    }\n    return Math.min(numFrames, left.length - position);\n  }\n}\n","import noop from './noop';\n/**\n * getWebAudioNode\n *\n * A wrapper to create an AudioNode and apply a filter for frame extraction\n * Copyright (c) Adrian Holovary https://github.com/adrianholovaty\n *\n * @param context - AudioContext\n * @param filter - Object containing an 'extract()' method\n * @param bufferSize - units of sample frames (256, 512, 1024, 2048, 4096, 8192, 16384)\n * @returns {ScriptProcessorNode}\n */\nconst getWebAudioNode = function(\n  context,\n  filter,\n  sourcePositionCallback = noop,\n  bufferSize = 4096\n) {\n  const node = context.createScriptProcessor(bufferSize, 2, 2);\n  const samples = new Float32Array(bufferSize * 2);\n\n  node.onaudioprocess = event => {\n    let left = event.outputBuffer.getChannelData(0);\n    let right = event.outputBuffer.getChannelData(1);\n    let framesExtracted = filter.extract(samples, bufferSize);\n    sourcePositionCallback(filter.sourcePosition);\n    if (framesExtracted === 0) {\n      filter.onEnd();\n    }\n    let i = 0;\n    for (; i < framesExtracted; i++) {\n      left[i] = samples[i * 2];\n      right[i] = samples[i * 2 + 1];\n    }\n  };\n  return node;\n};\n\nexport default getWebAudioNode;\n","const pad = function(n, width, z) {\n  z = z || '0';\n  n = n + '';\n  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n};\n\nconst minsSecs = function(secs) {\n  const mins = Math.floor(secs / 60);\n  const seconds = secs - mins * 60;\n  return `${mins}:${pad(parseInt(seconds), 2)}`;\n};\n\nexport default minsSecs;\n","/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nimport WebAudioBufferSource from './WebAudioBufferSource';\nimport getWebAudioNode from './getWebAudioNode';\nimport SoundTouch from './SoundTouch';\nimport SimpleFilter from './SimpleFilter';\nimport minsSecs from './minsSecs';\nimport noop from './noop';\n\nconst onUpdate = function (sourcePosition) {\n  const currentTimePlayed = this.timePlayed;\n  const sampleRate = this.sampleRate;\n  this.sourcePosition = sourcePosition;\n  this.timePlayed = sourcePosition / sampleRate;\n  if (currentTimePlayed !== this.timePlayed) {\n    const timePlayed = new CustomEvent('play', {\n      detail: {\n        timePlayed: this.timePlayed,\n        formattedTimePlayed: this.formattedTimePlayed,\n        percentagePlayed: this.percentagePlayed,\n      },\n    });\n    this._node.dispatchEvent(timePlayed);\n  }\n};\n\nexport default class PitchShifter {\n  constructor(context, buffer, bufferSize, onEnd = noop) {\n    this._soundtouch = new SoundTouch();\n    const source = new WebAudioBufferSource(buffer);\n    this.timePlayed = 0;\n    this.sourcePosition = 0;\n    this._filter = new SimpleFilter(source, this._soundtouch, onEnd);\n    this._node = getWebAudioNode(\n      context,\n      this._filter,\n      (sourcePostion) => onUpdate.call(this, sourcePostion),\n      bufferSize\n    );\n    this.tempo = 1;\n    this.rate = 1;\n    this.duration = buffer.duration;\n    this.sampleRate = context.sampleRate;\n    this.listeners = [];\n  }\n\n  get formattedDuration() {\n    return minsSecs(this.duration);\n  }\n\n  get formattedTimePlayed() {\n    return minsSecs(this.timePlayed);\n  }\n\n  get percentagePlayed() {\n    return (\n      (100 * this._filter.sourcePosition) / (this.duration * this.sampleRate)\n    );\n  }\n\n  set percentagePlayed(perc) {\n    this._filter.sourcePosition = parseInt(\n      perc * this.duration * this.sampleRate\n    );\n    this.sourcePosition = this._filter.sourcePosition;\n    this.timePlayed = this.sourcePosition / this.sampleRate;\n  }\n\n  get node() {\n    return this._node;\n  }\n\n  set pitch(pitch) {\n    this._soundtouch.pitch = pitch;\n  }\n\n  set pitchSemitones(semitone) {\n    this._soundtouch.pitchSemitones = semitone;\n  }\n\n  set rate(rate) {\n    this._soundtouch.rate = rate;\n  }\n\n  set tempo(tempo) {\n    this._soundtouch.tempo = tempo;\n  }\n\n  connect(toNode) {\n    this._node.connect(toNode);\n  }\n\n  disconnect() {\n    this._node.disconnect();\n  }\n\n  on(eventName, cb) {\n    this.listeners.push({ name: eventName, cb: cb });\n    this._node.addEventListener(eventName, (event) => cb(event.detail));\n  }\n\n  off(eventName = null) {\n    let listeners = this.listeners;\n    if (eventName) {\n      listeners = listeners.filter((e) => e.name === eventName);\n    }\n    listeners.forEach((e) => {\n      this._node.removeEventListener(e.name, (event) => e.cb(event.detail));\n    });\n  }\n}\n"],"names":["FifoSampleBuffer","constructor","_vector","Float32Array","_position","_frameCount","vector","position","startIndex","frameCount","endIndex","clear","receive","rewind","put","numFrames","putSamples","samples","sourceOffset","length","numSamples","ensureCapacity","destOffset","set","subarray","putBuffer","buffer","receiveSamples","output","extract","minLength","parseInt","newVector","ensureAdditionalCapacity","AbstractFifoSamplePipe","createBuffers","_inputBuffer","_outputBuffer","inputBuffer","outputBuffer","RateTransposer","reset","_rate","rate","slopeCount","prevSampleL","prevSampleR","clone","result","process","numFramesOutput","transpose","src","srcOffset","dest","used","i","out","srcIndex","FilterSupport","pipe","_pipe","fillInputBuffer","Error","fillOutputBuffer","numInputFrames","noop","SimpleFilter","sourceSound","callback","historyBufferSize","_sourcePosition","outputBufferPosition","RangeError","newOutputBufferPosition","sourcePosition","onEnd","numFramesExtracted","target","Math","min","currentFrames","max","handleSampleData","event","data","USE_AUTO_SEQUENCE_LEN","DEFAULT_SEQUENCE_MS","USE_AUTO_SEEKWINDOW_LEN","DEFAULT_SEEKWINDOW_MS","DEFAULT_OVERLAP_MS","_SCAN_OFFSETS","AUTOSEQ_TEMPO_LOW","AUTOSEQ_TEMPO_TOP","AUTOSEQ_AT_MIN","AUTOSEQ_AT_MAX","AUTOSEQ_K","AUTOSEQ_C","AUTOSEEK_AT_MIN","AUTOSEEK_AT_MAX","AUTOSEEK_K","AUTOSEEK_C","Stretch","_quickSeek","midBufferDirty","midBuffer","overlapLength","autoSeqSetting","autoSeekSetting","_tempo","setParameters","clearMidBuffer","sampleRate","sequenceMs","seekWindowMs","overlapMs","calculateSequenceParameters","calculateOverlapLength","tempo","newTempo","intskip","nominalSkip","seekWindowLength","skipFract","floor","sampleReq","seekLength","inputChunkSize","outputChunkSize","overlapInMsec","newOvl","refMidBuffer","checkLimits","x","mi","ma","seq","seek","quickSeek","enable","seekBestOverlapPosition","seekBestOverlapPositionStereoQuick","seekBestOverlapPositionStereo","bestOffset","bestCorrelation","correlation","preCalculateCorrelationReferenceStereo","Number","MIN_VALUE","calculateCrossCorrelationStereo","scanCount","correlationOffset","tempOffset","j","context","temp","mixingPosition","compare","mixing","calcLength","mixingOffset","overlap","overlapPosition","overlapStereo","inputPosition","input","outputPosition","tempFrame","frameScale","fi","inputOffset","outputOffset","offset","overlapSkip","start","testFloatEqual","a","b","SoundTouch","transposer","stretch","_intermediateBuffer","virtualPitch","virtualRate","virtualTempo","calculateEffectiveRateAndTempo","rateChange","tempoChange","pitch","pitchOctaves","exp","pitchSemitones","previousTempo","previousRate","WebAudioBufferSource","dualChannel","numberOfChannels","value","left","getChannelData","right","getWebAudioNode","filter","sourcePositionCallback","bufferSize","node","createScriptProcessor","onaudioprocess","framesExtracted","pad","n","width","z","Array","join","minsSecs","secs","mins","seconds","onUpdate","currentTimePlayed","timePlayed","CustomEvent","detail","formattedTimePlayed","percentagePlayed","_node","dispatchEvent","PitchShifter","_soundtouch","source","_filter","sourcePostion","call","duration","listeners","formattedDuration","perc","semitone","connect","toNode","disconnect","on","eventName","cb","push","name","addEventListener","off","e","forEach","removeEventListener"],"mappings":"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"}